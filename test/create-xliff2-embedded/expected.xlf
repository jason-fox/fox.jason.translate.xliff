<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<xliff srcLang="en" trgLang="de" version="2.0" xmlns="urn:oasis:names:tc:xliff:document:2.0">
  <file id="1" original="/topic.dita">
    <skeleton href="./skl/topic.dita.skl"></skeleton>
    <unit fs:fs="title" id="59931" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">Basic usage</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="15534" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="">&lt;codeph&gt;</data>
        <data id="">&lt;/codeph&gt;</data>
        <data id="">&lt;codeph&gt;</data>
        <data id="">&lt;/codeph&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">You will need to include the
          <pc>
            <mrk id="" translate="no" type="term">prism.css</mrk>
          </pc>and
          <pc>
            <mrk id="" translate="no" type="term">prism.js</mrk>
          </pc>files you downloaded in your page. Example:</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="57886" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="">&lt;codeph&gt;</data>
        <data id="">&lt;/codeph&gt;</data>
        <data id="">&lt;codeph&gt;</data>
        <data id="">&lt;/codeph&gt;</data>
        <data id="">&lt;xref format="html" scope="external" href="https://www.w3.org/TR/html52/textlevel-semantics.html#the-code-element"&gt;</data>
        <data id="">&lt;/xref&gt;</data>
        <data id="">&lt;codeph&gt;</data>
        <data id="">&lt;/codeph&gt;</data>
        <data id="">&lt;codeph&gt;</data>
        <data id="">&lt;/codeph&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">Prism does its best to encourage good authoring practices. Therefore,it only works with
          <pc>
            <mrk id="" translate="no" type="term">&lt;code&gt;</mrk>
          </pc>elements, since marking upcode without a
          <pc>
            <mrk id="" translate="no" type="term">&lt;code&gt;</mrk>
          </pc>element is semantically invalid.
          <pc>, the recommended way to define a code language is a
          <pc>
            <mrk id="" translate="no" type="term">language-xxxx</mrk>
          </pc>class, which is what Prism uses. Alternatively, Prism also supports a shorter version:
          <pc>
            <mrk id="" translate="no" type="term">lang-xxxx</mrk>
          </pc>.</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="50700" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="">&lt;codeph&gt;</data>
        <data id="">&lt;/codeph&gt;</data>
        <data id="">&lt;codeph&gt;</data>
        <data id="">&lt;/codeph&gt;</data>
        <data id="">&lt;codeph&gt;</data>
        <data id="">&lt;/codeph&gt;</data>
        <data id="">&lt;codeph&gt;</data>
        <data id="">&lt;/codeph&gt;</data>
        <data id="">&lt;codeph&gt;</data>
        <data id="">&lt;/codeph&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">To make things easier however, Prism assumes that this language definition is inherited. Therefore, if multiple
          <pc>
            <mrk id="" translate="no" type="term">&lt;code&gt;</mrk>
          </pc>elements have the same language, you can add the
          <pc>
            <mrk id="" translate="no" type="term">language-xxxx</mrk>
          </pc>class on one of their common ancestors. This way, you can also define a document-wide default language, by adding a
          <pc>
            <mrk id="" translate="no" type="term">language-xxxx</mrk>
          </pc>class on the
          <pc>
            <mrk id="" translate="no" type="term">&lt;body&gt;</mrk>
          </pc>or
          <pc>
            <mrk id="" translate="no" type="term">&lt;html&gt;</mrk>
          </pc>element.</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="46850" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="">&lt;codeph&gt;</data>
        <data id="">&lt;/codeph&gt;</data>
        <data id="">&lt;codeph&gt;</data>
        <data id="">&lt;/codeph&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">If you want to opt-out of highlighting for a
          <pc>
            <mrk id="" translate="no" type="term">&lt;code&gt;</mrk>
          </pc>element that is a descendant of an element with a declared code language, you can add the class
          <pc>
            <mrk id="" translate="no" type="term">language-none</mrk>
          </pc>to it (or any non-existing language, really).</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="25020" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="">&lt;xref format="html" scope="external" href="https://www.w3.org/TR/html5/grouping-content.html#the-pre-element"&gt;</data>
        <data id="">&lt;/xref&gt;</data>
        <data id="">&lt;codeph&gt;</data>
        <data id="">&lt;/codeph&gt;</data>
        <data id="">&lt;codeph&gt;</data>
        <data id="">&lt;/codeph&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">The
          <pc>(both for semantics and for Prism) is a
          <pc>
            <mrk id="" translate="no" type="term">&lt;pre&gt;</mrk>
          </pc>element with a
          <pc>
            <mrk id="" translate="no" type="term">&lt;code&gt;</mrk>
          </pc>element inside, like so:</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="34362" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="">&lt;codeph&gt;</data>
        <data id="">&lt;/codeph&gt;</data>
        <data id="">&lt;codeph&gt;</data>
        <data id="">&lt;/codeph&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">If you use that pattern, the
          <pc>
            <mrk id="" translate="no" type="term">&lt;pre&gt;</mrk>
          </pc>will automatically get the
          <pc>
            <mrk id="" translate="no" type="term">language-xxxx</mrk>
          </pc>class (if it doesn&#8217;t already have it) and will be styled as a code block.</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="25518" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="">&lt;codeph&gt;</data>
        <data id="">&lt;/codeph&gt;</data>
        <data id="">&lt;codeph&gt;</data>
        <data id="">&lt;/codeph&gt;</data>
        <data id="">&lt;xref format="html" scope="external" href="https://prismjs.com/extending.html#api"&gt;</data>
        <data id="">&lt;/xref&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">If you want to prevent any elements from being automatically highlighted, you can use the attribute
          <pc>
            <mrk id="" translate="no" type="term">data-manual</mrk>
          </pc>on the
          <pc>
            <mrk id="" translate="no" type="term">&lt;script&gt;</mrk>
          </pc>element you used for prism and use the
          <pc>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="title" id="33578" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">Usage with Webpack, Browserify, &amp; Other Bundlers</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="32784" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="">&lt;codeph&gt;</data>
        <data id="">&lt;/codeph&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">If you want to use Prism with a bundler, install Prism with
          <pc>
            <mrk id="" translate="no" type="term">npm</mrk>
          </pc>:</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="19337" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="">&lt;codeph outputclass="language-js"&gt;</data>
        <data id="">&lt;/codeph&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">You can then
          <pc>
            <mrk id="" translate="no" type="term">import</mrk>
          </pc>into your bundle</source>
        <target xml:lang="de"></target>
      </segment>
    </unit>
    <unit fs:fs="p" id="10929" xmlns:fs="urn:oasis:names:tc:xliff:fs:2.0">
      <originalData>
        <data id="">&lt;xref format="html" scope="external" href="https://github.com/mAAdhaTTah/babel-plugin-prismjs"&gt;</data>
        <data id="">&lt;/xref&gt;</data>
      </originalData>
      <segment state="initial">
        <source xml:lang="en" xml:space="preserve">To make it easy to configure your Prism instance with only thelanguages and plugins you need, use the babel plugin,
          <pc>
        <target xml:lang="de"></target>
      </segment>
    </unit>
  </file>
</xliff>

