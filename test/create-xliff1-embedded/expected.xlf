<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<xliff>
  <file datatype="xml" original="/topic.dita" source-language="en" target-language="de">
    <header xmlns="urn:oasis:names:tc:xliff:document:1.2">
      <skl>
        <external-file href="./skl/topic.dita.skl"></external-file>
      </skl>
    </header>
    <body xmlns="urn:oasis:names:tc:xliff:document:1.2">
      <trans-unit approved="no" id="59931" xml:space="preserve">
        <source xml:lang="en">Basic usage</source>
        <target xml:lang="de"></target>
      </trans-unit>
      <trans-unit approved="no" id="15534" xml:space="preserve">
        <source xml:lang="en">You will need to include the
          <x ctype="x-dita-codeph" id="" translate="no">prism.css</x>and
          <x ctype="x-dita-codeph" id="" translate="no">prism.js</x>files you downloaded in your page. Example:</source>
        <target xml:lang="de"></target>
      </trans-unit>
      <trans-unit approved="no" id="57886" xml:space="preserve">
        <source xml:lang="en">Prism does its best to encourage good authoring practices. Therefore,it only works with
          <x ctype="x-dita-codeph" id="" translate="no">&lt;code&gt;</x>elements, since marking upcode without a
          <x ctype="x-dita-codeph" id="" translate="no">&lt;code&gt;</x>element is semantically invalid.
          <x ctype="x-dita-xref" dita:format="html" dita:href="https://www.w3.org/TR/html52/textlevel-semantics.html#the-code-element" dita:scope="external" id="d3e25" xmlns:dita="dita-ot.org">According to the HTML5 spec</x>, the recommended way to define a code language is a
          <x ctype="x-dita-codeph" id="" translate="no">language-xxxx</x>class, which is what Prism uses. Alternatively, Prism also supports a shorter version:
          <x ctype="x-dita-codeph" id="" translate="no">lang-xxxx</x>.</source>
        <target xml:lang="de"></target>
      </trans-unit>
      <trans-unit approved="no" id="50700" xml:space="preserve">
        <source xml:lang="en">To make things easier however, Prism assumes that this language definition is inherited. Therefore, if multiple
          <x ctype="x-dita-codeph" id="" translate="no">&lt;code&gt;</x>elements have the same language, you can add the
          <x ctype="x-dita-codeph" id="" translate="no">language-xxxx</x>class on one of their common ancestors. This way, you can also define a document-wide default language, by adding a
          <x ctype="x-dita-codeph" id="" translate="no">language-xxxx</x>class on the
          <x ctype="x-dita-codeph" id="" translate="no">&lt;body&gt;</x>or
          <x ctype="x-dita-codeph" id="" translate="no">&lt;html&gt;</x>element.</source>
        <target xml:lang="de"></target>
      </trans-unit>
      <trans-unit approved="no" id="46850" xml:space="preserve">
        <source xml:lang="en">If you want to opt-out of highlighting for a
          <x ctype="x-dita-codeph" id="" translate="no">&lt;code&gt;</x>element that is a descendant of an element with a declared code language, you can add the class
          <x ctype="x-dita-codeph" id="" translate="no">language-none</x>to it (or any non-existing language, really).</source>
        <target xml:lang="de"></target>
      </trans-unit>
      <trans-unit approved="no" id="25020" xml:space="preserve">
        <source xml:lang="en">The
          <x ctype="x-dita-xref" dita:format="html" dita:href="https://www.w3.org/TR/html5/grouping-content.html#the-pre-element" dita:scope="external" id="d3e59" xmlns:dita="dita-ot.org">recommended way to mark up a code block</x>(both for semantics and for Prism) is a
          <x ctype="x-dita-codeph" id="" translate="no">&lt;pre&gt;</x>element with a
          <x ctype="x-dita-codeph" id="" translate="no">&lt;code&gt;</x>element inside, like so:</source>
        <target xml:lang="de"></target>
      </trans-unit>
      <trans-unit approved="no" id="34362" xml:space="preserve">
        <source xml:lang="en">If you use that pattern, the
          <x ctype="x-dita-codeph" id="" translate="no">&lt;pre&gt;</x>will automatically get the
          <x ctype="x-dita-codeph" id="" translate="no">language-xxxx</x>class (if it doesn&#8217;t already have it) and will be styled as a code block.</source>
        <target xml:lang="de"></target>
      </trans-unit>
      <trans-unit approved="no" id="25518" xml:space="preserve">
        <source xml:lang="en">If you want to prevent any elements from being automatically highlighted, you can use the attribute
          <x ctype="x-dita-codeph" id="" translate="no">data-manual</x>on the
          <x ctype="x-dita-codeph" id="" translate="no">&lt;script&gt;</x>element you used for prism and use the
          <x ctype="x-dita-xref" dita:format="html" dita:href="https://prismjs.com/extending.html#api" dita:scope="external" id="d3e84" xmlns:dita="dita-ot.org">API</x>. Example:</source>
        <target xml:lang="de"></target>
      </trans-unit>
      <trans-unit approved="no" id="33578" xml:space="preserve">
        <source xml:lang="en">Usage with Webpack, Browserify, &amp; Other Bundlers</source>
        <target xml:lang="de"></target>
      </trans-unit>
      <trans-unit approved="no" id="32784" xml:space="preserve">
        <source xml:lang="en">If you want to use Prism with a bundler, install Prism with
          <x ctype="x-dita-codeph" id="" translate="no">npm</x>:</source>
        <target xml:lang="de"></target>
      </trans-unit>
      <trans-unit approved="no" id="19337" xml:space="preserve">
        <source xml:lang="en">You can then
          <x ctype="x-dita-codeph" dita:outputclass="language-js" id="" translate="no" xmlns:dita="dita-ot.org">import</x>into your bundle</source>
        <target xml:lang="de"></target>
      </trans-unit>
      <trans-unit approved="no" id="10929" xml:space="preserve">
        <source xml:lang="en">To make it easy to configure your Prism instance with only thelanguages and plugins you need, use the babel plugin,
          <x ctype="x-dita-xref" dita:format="html" dita:href="https://github.com/mAAdhaTTah/babel-plugin-prismjs" dita:scope="external" id="d3e115" xmlns:dita="dita-ot.org">babel-plugin-prismjs</x>. This will allow you to load the minimum number of languages and plugins to satisfy your needs. See that plugin's documentation for configuration details</source>
        <target xml:lang="de"></target>
      </trans-unit>
    </body>
  </file>
</xliff>

