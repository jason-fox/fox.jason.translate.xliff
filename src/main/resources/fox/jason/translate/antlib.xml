<?xml version="1.0" encoding="UTF-8" standalone="no"?><!--ant-->
<!--
	This file is part of the DITA-OT Translate Plug-in project.
	See the accompanying LICENSE file for applicable licenses.
-->
<antlib xmlns:if="ant:if" xmlns:unless="ant:unless">


	<!--
		Converts a value to url-encoding

		@param  string -   The value to convert
		@param  to -  The property to set
	-->
	<taskdef classname="fox.jason.translate.tasks.UrlEncodeTask" onerror="ignore" name="url-encode"/>

	<!--
		Iterator function to run a given macro against a set of files

		@param macro - A macro to run.
		@param fileset - A set of files
		@param dir - The input directory
		@param todir - The output directory
	-->
	<taskdef classname="fox.jason.translate.tasks.IterateFilesetTask" onerror="ignore" name="iterate-xliff"/>

	<!--
		Reinserts a doctype into a file

		@param file    - The DITA file to clean up
	-->
	<taskdef classname="fox.jason.translate.tasks.ReinsertDoctypeTask" onerror="ignore" name="add-doctype"/>

	<macrodef name="reinsert-doctype">
		<attribute name="file"/>
		<sequential>
			<add-doctype file="@{file}"/>
		</sequential>
	</macrodef>


	<!--
		Creates a skeleton file with placeholder text

		@param file - The name of the skelton file to create
		@param todir - The output directory
	-->
	<macrodef name="skeleton-file">
		<attribute name="file"/>
		<attribute name="todir" default=""/>
		<sequential>
			<local name="target.dita.id"/>
			<local name="placeholder.text"/>
			<local name="token.id"/>

			<basename property="target.dita.id" file="@{file}" suffix=".xml"/>
			<loadfile property="placeholder.text" srcFile="@{file}"/>
			<property name="token.id">@@@@@${target.dita.id}@@@@@</property>

			<replace dir="${output.dir}" token="${token.id}" value="${placeholder.text}">
				<include name="**/*.dita"/>
				<include name="**/*.ditamap"/>
			</replace>
		</sequential>
	</macrodef>

	<macrodef name="translated-target">
		<attribute name="file"/>
		<attribute name="message" default=""/>
		<sequential>
			<echo taskname="translated-target" message="&lt;text&gt;@{message}&lt;/text&gt;" file="@{file}"/>
		</sequential>
	</macrodef>


	<!--
		Calls a translation service and creates the translated texts

		@param file - The name of the XLIFF source file
		@param todir - The output directory
	-->
	<macrodef name="translate-source">
		<attribute name="file"/>
		<attribute name="todir"/>
		<sequential>
			<local name="source.file.name"/>
			<basename property="source.file.name" file="@{file}"/>


			<!-- Create a translated target file -->
			<bing-translate if:set="translate.bing" file="@{file}" out="@{todir}/${source.file.name}"/>
			<custom-translate if:set="translate.custom" file="@{file}" out="@{todir}/${source.file.name}"/>
			<deepl-translate if:set="translate.deepl" file="@{file}" out="@{todir}/${source.file.name}"/>
			<dummy-translate if:set="translate.dummy" file="@{file}" out="@{todir}/${source.file.name}"/> 
			<watson-translate if:set="translate.watson" file="@{file}" out="@{todir}/${source.file.name}"/>
			<yandex-translate if:set="translate.yandex" file="@{file}" out="@{todir}/${source.file.name}"/>
		</sequential>
	</macrodef>

	<!--
		Dummy Translation. Copies untranslated text to a file

		@param file - The name of a file holding the input text
		@param out - The output file
	-->
	<macrodef name="dummy-translate">
		<attribute name="file"/>
		<attribute name="out"/>
		<sequential>
			<local name="source.text"/>
			<loadfile property="source.text" srcFile="@{file}"/>
			<translated-target file="@{out}" message="${source.text}"/>
		</sequential>
	</macrodef>

	<!--
		Watson Translation. Copies text translated by IBM cloud services to a file

		@param file - The name of a file holding the input text
		@param out - The output file
	-->
	<macrodef name="watson-translate">
		<attribute name="file"/>
		<attribute name="out"/>
		<sequential>

			<local name="watson.result"/>
			<local name="watson.out"/>
			<local name="watson.temp.file"/>
			<local name="watson.response"/>
			<local name="watson.translation"/>
			<local name="source.text"/>

			<replace taskname="source-text" file="@{file}" token="&quot;" value="\&quot;"/>
			<replace taskname="source-text" file="@{file}" token="${line.separator}" value="\n"/>
			<loadfile taskname="source-text" property="source.text" srcFile="@{file}"/>
			<tempfile deleteonexit="true" destdir="${dita.temp.dir}" 
				property="watson.temp.file" suffix=".json"/>



			<exec taskname="watson-translate" executable="curl" osfamily="unix" 
				resultproperty="watson.result" outputproperty="watson.out" failOnError="false">
				<arg value="-X"/>
				<arg value="POST"/>
				<arg value="-u"/>
				<arg value="apikey:${watson.apikey}"/>
				<arg value="-H"/>
				<arg value="Content-Type: application/json"/> 
				<arg value="--output"/>
				<arg value="${watson.temp.file}"/>
				<arg value="--data"/>
				<arg value="{&quot;text&quot;: [&quot;${source.text}&quot;], &quot;model_id&quot;: &quot;${translate.from}-${translate.to}&quot;}"/>
				<arg value="-sS"/>
				<arg value="${watson.translate.url}?version=2018-05-01"/>
			</exec>
		    <echo taskname="watson-translate" level="verbose" message="${line.separator}${watson.out}"/>

		    
			<loadfile taskname="watson-translate" property="watson.response" srcFile="${watson.temp.file}"/>
			<watson-read-response text="${watson.response}"  outproperty="watson.translation"/>
			<translated-target message="${watson.translation}" file="@{out}"/>


		</sequential>
	</macrodef>

	<!--
		Watson Translation. Parses the response and extracts the translated text

		@param text - The response from IBM cloud services
		@param outproperty - The property to output to
	-->
	<taskdef classname="fox.jason.translate.tasks.WatsonParseTask" onerror="ignore" name="watson-read-response"/>	

	<!--
		Microsoft Translation. Copies text translated by Azure cloud services to a file

		@param file - The name of a file holding the input text
		@param out - The output file
	-->
	<macrodef name="bing-translate">
		<attribute name="file"/>
		<attribute name="out"/>
		<sequential>

			<local name="bing.result"/>
			<local name="bing.out"/>
			<local name="bing.temp.file"/>
			<local name="bing.response"/>
			<local name="bing.translation"/>
			<local name="source.text"/>


			<replace taskname="source-text" file="@{file}" token="translate=&quot;no&quot;" value="class=&quot;notranslate&quot;"/>
			<replace taskname="source-text" file="@{file}" token="&quot;" value="\&quot;"/>
			<loadfile taskname="source-text" property="source.text" srcFile="@{file}"/>
			
	
			<tempfile deleteonexit="true" destdir="${dita.temp.dir}" 
				property="bing.temp.file" suffix=".txt"/>

			<exec unless:set="translate.region" taskname="bing-translate" executable="curl" osfamily="unix" 
				resultproperty="bing.result" outputproperty="bing.out">
				<arg value="-X"/>
				<arg value="POST"/>
			
				<arg value="-H"/>
				<arg value="Ocp-Apim-Subscription-Key: ${bing.apikey}"/>
				<arg value="-H"/>
				<arg value="Content-type: application/json"/>
				<arg value="-H"/>
				<arg value="Accept: application/json"/>
				<arg value="--output"/>
				<arg value="${bing.temp.file}"/>
				<arg value="--data"/>
				<arg value="[{&quot;Text&quot;: &quot;${source.text}&quot;}]"/>
				<arg value="-sS"/>
				<arg value="${bing.translate.url}?api-version=3.0&amp;from=${translate.from}&amp;to=${translate.to}&amp;textType=html"/>
			</exec>
			<exec if:set="translate.region" taskname="bing-translate" executable="curl" osfamily="unix" 
				resultproperty="bing.result" outputproperty="bing.out">
				<arg value="-X"/>
				<arg value="POST"/>
				<arg value="-H"/>
				<arg value="Ocp-Apim-Subscription-Key: ${bing.apikey}"/>
				<arg value="-H"/>
				<arg value="Ocp-Apim-Subscription-Region: ${translate.region}"/>
				<arg value="-H"/>
				<arg value="Content-type: application/json"/>
				<arg value="-H"/>
				<arg value="Accept: application/json"/>
				<arg value="--output"/>
				<arg value="${bing.temp.file}"/>
				<arg value="--data"/>
				<arg value="[{&quot;Text&quot;: &quot;${source.text}&quot;}]"/>
				<arg value="-sS"/>
				<arg value="${bing.translate.url}?api-version=3.0&amp;from=${translate.from}&amp;to=${translate.to}&amp;textType=html"/>
			</exec>
			<loadfile  taskname="bing-translate" property="bing.response" srcFile="${bing.temp.file}"/>
			<bing-read-response text="${bing.response}" outproperty="bing.translation"/>
			<translated-target message="${bing.translation}" file="@{out}"/>
		</sequential>
	</macrodef>

	<!--
		Microsoft Translation. Parses the response and extracts the translated text

		@param text - The response from Azure services
		@param outproperty - The property to output to
	-->
	<taskdef classname="fox.jason.translate.tasks.BingParseTask" onerror="ignore" name="bing-read-response"/>

	<!--
		Yandex Translation. Copies text translated by Yandex translate to a file

		@param file - The name of a file holding the input text
		@param out - The output file
	-->
	<macrodef name="yandex-translate">
		<attribute name="file"/>
		<attribute name="out"/>
		<sequential>

			<local name="yandex.result"/>
			<local name="yandex.out"/>
			<local name="yandex.temp.file"/>
			<local name="yandex.response"/>
			<local name="yandex.translation"/>
			<local name="source.text"/>
			<local name="source.text.encoded"/>


			<replace taskname="source-text" file="@{file}" token="translate=&quot;no&quot;" value="class=&quot;notranslate&quot;"/>
			
			<loadfile taskname="source-text" property="source.text" srcFile="@{file}"/>
			<url-encode string="${source.text}" to="source.text.encoded"/>
			
			<tempfile deleteonexit="true" destdir="${dita.temp.dir}" 
				property="yandex.temp.file" suffix=".txt"/>

			<exec taskname="yandex-translate" executable="curl" osfamily="unix" 
				resultproperty="yandex.result" outputproperty="yandex.out">
				<arg value="-X"/>
				<arg value="POST"/>
				<arg value="-H"/>
				<arg value="Content-type: application/x-www-form-urlencoded"/>
				<arg value="-H"/>
				<arg value="Accept: application/json"/>
				<arg value="--output"/>
				<arg value="${yandex.temp.file}"/>
				<arg value="--data"/>
				<arg value="text=${source.text.encoded}"/>
				<arg value="-sS"/>
				<arg value="${yandex.translate.url}?ui=${translate.from}&amp;key=${yandex.apikey}&amp;lang=${translate.from}-${translate.to}&amp;format=html"/>
			</exec>
			<loadfile  taskname="yandex-translate" property="yandex.response" srcFile="${yandex.temp.file}"/>

			<yandex-read-response text="${yandex.response}" outproperty="yandex.translation"/>
			<translated-target message="${yandex.translation}" file="@{out}"/>
		</sequential>
	</macrodef>

	<!--
		Yandex Translation. Parses the response and extracts the translated text

		@param text - The response from Yandex Translate
		@param outproperty - The property to output to
	-->
	<taskdef classname="fox.jason.translate.tasks.YandexParseTask" onerror="ignore" name="yandex-read-response"/>

	<!--
		Deepl Translation. Copies text translated by Deepl services to a file

		@param file - The name of a file holding the input text
		@param out - The output file
	-->
	<macrodef name="deepl-translate">
		<attribute name="file"/>
		<attribute name="out"/>
		<sequential>

			<local name="deepl.result"/>
			<local name="deepl.out"/>
			<local name="deepl.temp.file"/>
			<local name="deepl.response"/>
			<local name="deepl.translation"/>
			<local name="source.text"/>
			<local name="source.text.encoded"/>


			<replace taskname="source-text" file="@{file}" token="translate=&quot;no&quot;" value="class=&quot;notranslate&quot;"/>
			<!--replace taskname="source-text" file="@{file}" token="&quot;" value="\&quot;"/-->
			<loadfile taskname="source-text" property="source.text" srcFile="@{file}"/>
			<url-encode string="${source.text}" to="source.text.encoded"/>
			
			<tempfile deleteonexit="true" destdir="${dita.temp.dir}" 
				property="deepl.temp.file" suffix=".txt"/>

			<exec taskname="deepl-translate" executable="curl" osfamily="unix" 
				resultproperty="deepl.result" outputproperty="deepl.out">
				<arg value="-X"/>
				<arg value="POST"/>
				<arg value="-H"/>
				<arg value="Content-type: application/x-www-form-urlencoded"/>
				<arg value="-H"/>
				<arg value="Accept: application/json"/>
				<arg value="--output"/>
				<arg value="${deepl.temp.file}"/>
				<arg value="--data"/>
				<arg value="text=${source.text.encoded}"/>
				<arg value="-sS"/>
				<arg value="${deepl.translate.url}?source_lang=${translate.from}&amp;auth_key=${deepl.apikey}&amp;target_lang=${translate.to}&amp;tag_handling=xml"/>
			</exec>
			<loadfile  taskname="deepl-translate" property="deepl.response" srcFile="${deepl.temp.file}"/>
			<deepl-read-response text="${deepl.response}" outproperty="deepl.translation"/>
			<translated-target message="${deepl.translation}" file="@{out}"/>
		</sequential>
	</macrodef>

	<!--
		Deepl Translation. Parses the response and extracts the translated text

		@param text - The response from Deepl
		@param outproperty - The property to output to
	-->
	<taskdef classname="fox.jason.translate.tasks.DeeplParseTask" onerror="ignore" name="deepl-read-response" />

	<!--
		Custon Translation. Copies text translated by a custom cloud service to a file
		- Not implemented yet.

		@param file - The name of a file holding the input text
		@param out - The output file
	-->
	<macrodef name="custom-translate">
		<attribute name="file"/>
		<attribute name="out"/>
		<sequential>
			<fail/>
		</sequential>
	</macrodef>

	<!--
		Add a doctype to a directory containing DITA files

		@param toDir - The output location of the files
		@param dir  - The location of the files to process
		@param refid - The reference to a fileset
	-->
	<macrodef name="reinsert-doctypes">
		<attribute name="refid"/>
		<attribute name="dir"/>
		<sequential>
			<iterate-xliff macro="reinsert-doctype" dir="@{dir}">
				<fileset refid="@{refid}"/>
			</iterate-xliff>
		</sequential>
	</macrodef>


	<!--
		Replace skelton placeholders with content

		@param dir  - The location of the files to process
		@param refid - The reference to a fileset
	-->
	<macrodef name="skeleton-files">
		<attribute name="src"/>
		<attribute name="dir"/>
		<sequential>
			<iterate-xliff macro="skeleton-file" dir="@{dir}">
				<fileset refid="@{src}"/>
			</iterate-xliff>
		</sequential>
	</macrodef>

	<!--
		Auto translate source trans-units

		@param dir  - The location of the files to process
		@param refid - The reference to a fileset
	-->
	<macrodef name="translate-sources">
		<attribute name="src"/>
		<attribute name="dir"/>
		<attribute name="todir"/>
		<sequential>
			<iterate-xliff macro="translate-source" dir="@{dir}" todir="@{todir}">
				<fileset refid="@{src}"/>
			</iterate-xliff>
		</sequential>
	</macrodef>


	<!--
		Ensure that the Bing Translation service is authorized
	-->
	<macrodef name="bing-authorization">
		<sequential>
			<local name="bing.result"/>
			<local name="bing.out"/>
			<tempfile deleteonexit="true" destdir="${dita.temp.dir}" 
				property="bing.auth.temp.file" suffix=".txt"/>

			<exec unless:set="translate.region" taskname="bing-auth" executable="curl" osfamily="unix" 
				resultproperty="bing.result" outputproperty="bing.out">
				<arg value="-X"/>
				<arg value="POST"/>
			
				<arg value="-H"/>
				<arg value="Ocp-Apim-Subscription-Key: ${bing.apikey}"/>
				<arg value="-H"/>
				<arg value="Content-type: application/x-www-form-urlencoded"/>
				<arg value="-H"/>
				<arg value="Content-length: 0"/>
				<arg value="--output"/>
				<arg value="${bing.auth.temp.file}"/>
				<arg value="-sS"/>
				<arg value="${bing.authentication.url}"/>
			</exec>


			<exec if:set="translate.region" taskname="bing-auth" executable="curl" osfamily="unix" 
				resultproperty="bing.result" outputproperty="bing.out">
				<arg value="-X"/>
				<arg value="POST"/>
				<arg value="-H"/>
				<arg value="Ocp-Apim-Subscription-Key: ${bing.apikey}"/>
				<arg value="-H"/>
				<arg value="Ocp-Apim-Subscription-Region: ${translate.region}"/>
				<arg value="-H"/>
				<arg value="Content-type: application/x-www-form-urlencoded"/>
				<arg value="-H"/>
				<arg value="Content-length: 0"/>
				<arg value="--output"/>
				<arg value="${bing.auth.temp.file}"/>
				<arg value="-sS"/>
				<arg value="${bing.authentication.url}"/>
			</exec>

			<echo taskname="auth-bing" level="verbose" message="${line.separator}${bing.out}"/>
			<loadfile property="bing.bearer.token" srcFile="${bing.auth.temp.file}"/>

			<dita-ot-fail id="XLFF004F">
				<condition>
					<contains string="${bing.bearer.token}" substring="error"/>
				</condition>
			</dita-ot-fail>
		</sequential>
	</macrodef>


	<!--
		Read translations from a cache file and copy over approved
		translations
	-->
	<macrodef name="skeleton-prepare">
		<attribute name="xliff"/>
		<sequential>

			<tempfile deleteonexit="true" destdir="${dita.temp.dir}" 
				property="xliff.temp.file" suffix=".xlf"/>
			<copy file="@{xliff}" tofile="${xliff.temp.file}"/>			
			<replace file="${xliff.temp.file}" token="xmlns=&quot;urn:oasis:names:tc:xliff:document:1.2&quot;" value=""/>
			<replace file="${xliff.temp.file}" token="xmlns=&quot;urn:oasis:names:tc:xliff:document:2.0&quot;" value=""/>

			<extract-targets xliff="${xliff.temp.file}"/>

			<skeleton-prepare-xliff1 if:set="xliff.version.1" xliff="${xliff.temp.file}"/>
			<skeleton-prepare-xliff2 if:set="xliff.version.2" xliff="${xliff.temp.file}"/>


		</sequential>
	</macrodef>


	<macrodef name="skeleton-prepare-xliff1">
		<attribute name="xliff"/>
		<sequential>
			
			<!-- 
				For each <target> language element in the XLIFF file, extract only the data
				within the tag and transform it back into DITA format
			-->
			<xslt taskname="target-xsl" destdir="${dita.temp.dir}/stage2"  extension=".xml" 
				style="${translate.customization.dir}/${xliff.version}/trans-unit.xsl"  
				includes="**/*.xml"  
				basedir="${dita.temp.dir}/stage1">
			</xslt>

			<!-- Copy over images and other untranslated sources -->
			<copy todir="${output.dir}" overwrite="true" failonerror="false">
				<fileset dir="${args.input.dir}/skl">
					<exclude name="**/*.skl"/>
				</fileset>
			</copy>
			<!-- Copy over unprocessed skeleton files into output dir -->
			<xmltask taskname="xliff1-read"  source="@{xliff}">
				<call path="xliff/file">
					<param default="" name="original" path="@original"/>
					<param default="" name="skeleton" path="header/skl/external-file/@href"/>
					<actions>
						<copy file="${args.input.dir}/@{skeleton}" tofile="${output.dir}/@{original}"/>
					</actions>
				</call>
			</xmltask>

		</sequential>
	</macrodef>

	<macrodef name="skeleton-prepare-xliff2">
		<attribute name="xliff"/>
		<sequential>
			<!-- 
				For each <target> language element in the XLIFF file, extract only the data
				within the tag and transform it back into DITA format
			-->
			<xslt taskname="target-xsl" destdir="${dita.temp.dir}/stage2"  extension=".xml" 
				style="${translate.customization.dir}/${xliff.version}/trans-unit.xsl"
				includes="**/*.xml"  
				basedir="${dita.temp.dir}/stage1">
			</xslt>

			<!-- Copy over images and other untranslated sources -->
			<copy todir="${output.dir}" overwrite="true" failonerror="false">
				<fileset dir="${args.input.dir}/skl">
					<exclude name="**/*.skl"/>
				</fileset>
			</copy>
			<!-- Copy over unprocessed skeleton files into output dir -->
			<xmltask taskname="xliff2-read"  source="@{xliff}">
				<call path="xliff/file">
					<param default="" name="original" path="@original"/>
					<param default="" name="skeleton" path="skeleton/@href"/>
					<actions>
						<copy file="${args.input.dir}/@{skeleton}" tofile="${output.dir}/@{original}"/>
					</actions>
				</call>
			</xmltask>
		</sequential>
	</macrodef>



	<!--
		Read translations from a cache file and copy over approved
		translations
	-->
	<macrodef name="get-translations">
		<attribute name="xliff"/>
		<sequential>
			<!-- place the translations back into the XLIFF file -->
			<tempfile deleteonexit="true" destdir="${dita.temp.dir}" 
				property="tempfile.xliff" suffix=".xml"/>
			<copy file="@{xliff}" tofile="${tempfile.xliff}"/>
			<extract-sources xliff="${tempfile.xliff}"/>
			<!-- now do the translation processing -->
			<fileset id="source.texts" dir="${dita.temp.dir}/stage2" casesensitive="yes">
				<include name="**/*.xml"/>
			</fileset>
			
			<translate-sources src="source.texts" dir="${dita.temp.dir}/stage2" todir="${dita.temp.dir}/stage3"/>

			<xslt taskname="add-targets" in="${tempfile.xliff}" out="@{xliff}"
				style="${translate.customization.dir}/add-target.xsl">
				<param expression="${dita.temp.dir}/stage3" name="BASE_DIR"/>
			</xslt>
		</sequential>
	</macrodef>


	<macrodef name="extract-sources">
		<attribute name="xliff"/>
		<sequential>
			<replace file="@{xliff}" token="xmlns=&quot;urn:oasis:names:tc:xliff:document:2.0&quot;" value=""/>
			<replace file="@{xliff}" token="xmlns=&quot;urn:oasis:names:tc:xliff:document:1.2&quot;" value=""/>
			
			<dirname property="xliff.dir" file="@{xliff}"/>
			<basename property="xliff.base" file="@{xliff}"/>
			<xslt taskname="split-sources" basedir="${xliff.dir}" 
				style="${translate.customization.dir}/strip-source.xsl"
				includes="${xliff.base}"
				destdir="${dita.temp.dir}/stage2">
			</xslt>
		</sequential>
	</macrodef>

	<macrodef name="extract-targets">
		<attribute name="xliff"/>
		<sequential>
			<replace file="@{xliff}" token="xmlns=&quot;urn:oasis:names:tc:xliff:document:2.0&quot;" value=""/>
			<replace file="@{xliff}" token="xmlns=&quot;urn:oasis:names:tc:xliff:document:1.2&quot;" value=""/>
	
			<dirname property="xliff.dir" file="@{xliff}"/>
			<basename property="xliff.base" file="@{xliff}"/>
			<xslt taskname="split-targets" basedir="${xliff.dir}" 
				style="${translate.customization.dir}/strip-target.xsl"
				includes="${xliff.base}"
				destdir="${dita.temp.dir}/stage1">
			</xslt>
		</sequential>
	</macrodef>

	<macrodef name="load-service-urls">
		<sequential>
			<!-- IBM Cloud Services -->
			<property name="watson.translate.url" if:set="translate.url" 
				value="${translate.url}"/>
			<property name="watson.apikey" if:set="translate.apikey"
			 value="${translate.apikey}"/>

			<!-- Microsoft Azure -->
			<property name="bing.apikey" if:set="translate.apikey"
				value="${translate.apikey}"/>
			<property name="bing.translate.url" if:set="translate.url"
				value="${translate.url}"/>
			<property name="bing.authentication.url" if:set="translate.authentication.url"
				value="${translate.authentication.url}"/>

			<!-- Yandex -->
			<property name="yandex.translate.url" if:set="translate.url" 
				value="${translate.url}"/>
			<property name="yandex.apikey" if:set="translate.apikey"
			value="${translate.apikey}"/>

			<!-- Deepl -->
			<property name="deepl.translate.url" if:set="translate.url" 
				value="${translate.url}"/>
			<property name="deepl.apikey" if:set="translate.apikey"
			value="${translate.apikey}"/>

			<!-- Custom -->
			<property name="custom.translate.url" if:set="translate.url"
				value="${translate.url}"/>


			<!-- Fallback - load Service URLs from properties file -->
			<property file="${dita.plugin.fox.jason.translate.xliff.dir}/cfg/configuration.properties"/>

			<!-- Decide which auto-translation service to use -->
			<condition property="translate.bing">
				<equals arg1="${translate.service}" arg2="bing"/>
			</condition>
			<condition property="translate.watson">
				<equals arg1="${translate.service}" arg2="watson"/>
			</condition>
			<condition property="translate.dummy">
				<equals arg1="${translate.service}" arg2="dummy"/>
			</condition>
			<condition property="translate.custom">
				<equals arg1="${translate.service}" arg2="custom"/>
			</condition>
			<condition property="translate.yandex">
				<equals arg1="${translate.service}" arg2="yandex"/>
			</condition>
			<condition property="translate.deepl">
				<equals arg1="${translate.service}" arg2="deepl"/>
			</condition>

			<condition property="xliff.version.1">
				<equals arg1="${xliff.version}" arg2="1"/>
			</condition>

			<condition property="xliff.version.2">
				<equals arg1="${xliff.version}" arg2="2"/>
			</condition>
		</sequential>
	</macrodef>

</antlib>