<?xml version="1.0" encoding="UTF-8"?>
<!--
	This file is part of the DITA Translate project.
	See the accompanying LICENSE file for applicable licenses.
-->
<project
  xmlns:dita="http://dita-ot.sourceforge.net"
  xmlns:if="ant:if"
  xmlns:unless="ant:unless"
  name="fox.jason.translate.xliff"
>


	<!-- 
		Pre-processing for all XLIFF operations, ensure that we have
		an XMLCatalog and set property defaults.
	-->


	<target name="xliff.init">

		<!-- This defines the output file -->
		<dita-ot-fail id="DOTA069F">
			<condition>
				<not>
					<available file="${args.input}" type="file"/>
				</not>
			</condition>
			<param name="1" value="${args.input}"/>
		</dita-ot-fail>
		<dirname property="args.input.dir" file="${args.input}"/>


		<taskdef resource="fox/jason/translate/antlib.xml"/>

		<property
      name="translate.customization.dir"
      value="${dita.plugin.fox.jason.translate.xliff.dir}/xsl"
    />
		<property
      name="translate.resource.dir"
      value="${dita.plugin.fox.jason.translate.xliff.dir}/resource"
    />


		<xmlcatalog id="fake.dita.catalog">
			<dtd
        publicId="-//OASIS//DTD DITA Topic//EN"
        location="${translate.resource.dir}/fake.dtd"
      />
			<dtd
        publicId="-//OASIS//DTD DITA Map//EN"
        location="${translate.resource.dir}/fake.dtd"
      />
			<dtd
        publicId="-//OASIS//DTD DITA BookMap//EN"
        location="${translate.resource.dir}/fake.dtd"
      />
			<dtd
        publicId="-//OASIS//DTD DITA DITAVAL//EN"
        location="${translate.resource.dir}/fake.dtd"
      />
			<dtd
        publicId="-//OASIS//DTD DITA Concept//EN"
        location="${translate.resource.dir}/fake.dtd"
      />
			<dtd
        publicId="-//OASIS//DTD DITA Task//EN"
        location="${translate.resource.dir}/fake.dtd"
      />
			<catalogpath path="${dita.plugin.org.dita.base.dir}/catalog-dita.xml"/>
		</xmlcatalog>

		<!-- Load Service URLs from command line -->
		<load-service-urls/>

	</target>

	<!-- 
		Pre processing for translation operations, ensure that 
		we have some processing dirs in temp
	--> 
	<target name="trans-unit.init" depends="xliff.init">

		<mkdir dir="${dita.temp.dir}/stage1"/>
		<mkdir dir="${dita.temp.dir}/stage2"/>
		<mkdir dir="${dita.temp.dir}/stage3"/>
	</target>

	<target name="translate.init" depends="trans-unit.init">

		<dita-ot-fail id="XLFF003F" if:set="translate.watson">
			<condition>
				<equals arg1="${watson.apikey}" arg2="XXX"/>
			</condition>
		</dita-ot-fail>

		<dita-ot-fail id="XLFF004F" if:set="translate.bing">
			<condition>
				<equals arg1="${bing.apikey}" arg2="XXX"/>
			</condition>
		</dita-ot-fail>

		<dita-ot-fail id="XLFF006F" if:set="translate.deepl">
			<condition>
				<equals arg1="${deepl.apikey}" arg2="XXX"/>
			</condition>
		</dita-ot-fail>

		<dita-ot-fail id="XLFF007F" if:set="translate.yandex">
			<condition>
				<equals arg1="${yandex.apikey}" arg2="XXX"/>
			</condition>
		</dita-ot-fail>

		<bing-authorization if:set="translate.bing"/>
	</target>

		
	<!-- 
		Extract an XLIFF File and skeleton files from DITA
	-->
	<target name="xliff-create">
		<!-- Add a unique md5 id to each dita element containing text -->
		<xslt
      taskname="md5-src-gen"
      destdir="${dita.temp.dir}/md5"
      extension=".dita.xml"
      style="${translate.customization.dir}/add-md5-src.xsl"
      basedir="${args.input.dir}"
      includes="*.dita,**/*.dita"
    >
			<xmlcatalog refid="fake.dita.catalog"/>
		</xslt>
		<!-- Add a unique md5 id to each ditamap element containing text -->
		<xslt
      taskname="md5-src-gen"
      destdir="${dita.temp.dir}/md5"
      extension=".ditamap.xml"
      style="${translate.customization.dir}/add-md5-src.xsl"
      basedir="${args.input.dir}"
      includes="*.ditamap,**/*.ditamap"
    >
			<xmlcatalog refid="fake.dita.catalog"/>
		</xslt>
		
		<!-- Generate the skeleton files -->
		<xslt
      taskname="skeleton-gen"
      destdir="${output.dir}/skl"
      extension=".skl"
      style="${translate.customization.dir}/dita2skeleton.xsl"
      basedir="${dita.temp.dir}/md5"
    >
			<xmlcatalog refid="fake.dita.catalog"/>
			<param expression="${translate.to}" name="TARGET_LANG"/>
		</xslt>

		<fileset id="skl.contents" dir="${output.dir}/skl" casesensitive="yes">
			<include name="**/*.dita.skl"/>
			<include name="**/*.ditamap.skl"/>
		</fileset>
		<reinsert-doctypes refid="skl.contents" dir="${output.dir}/skl"/>
		<!-- Copy over images and other untranslated sources -->
		<copy todir="${output.dir}/skl" overwrite="true">
			<fileset dir="${args.input.dir}">
				<exclude name="**/*.dita"/>
				<exclude name="**/*.ditamap"/>
			</fileset>
		</copy>

		<!-- Fallback - load from and to langs from properties file -->
		<property
      file="${dita.plugin.fox.jason.translate.xliff.dir}/cfg/configuration.properties"
    />
		<!-- Fallback - dummy cache file -->
		<tempfile
      unless:set="translate.cachefile"
      deleteonexit="true"
      destdir="${dita.temp.dir}"
      property="dummy.translate.cachefile"
      suffix=".xml"
    />
		<echo
      unless:set="translate.cachefile"
      file="${dummy.translate.cachefile}"
      message="&lt;root/&gt;"
    />


		<!-- 
			Generate a series of XLIFF files iterating each unique
			md5 id 
		-->
		<xslt
      taskname="xliff-gen"
      destdir="${dita.temp.dir}/xliff"
      extension=".xlf.xml"
      style="${translate.customization.dir}/${xliff.version}/dita-xliff.xsl"
      basedir="${dita.temp.dir}/md5"
    >
			<xmlcatalog refid="fake.dita.catalog"/>
			<param expression="${dita.temp.dir}/md5" name="SOURCE"/>
			<param expression="${dita.temp.dir}/skl" name="SKELETON"/>
			<param expression="${translate.from}" name="SOURCE_LANG"/>
			<param expression="${translate.to}" name="TARGET_LANG"/>
			<param
        if:set="translate.cachefile"
        expression="${translate.cachefile}"
        name="TRANS_CACHE"
      />
			<param
        unless:set="translate.cachefile"
        expression="${dummy.translate.cachefile}"
        name="TRANS_CACHE"
      />


			<fileset dir="${dita.temp.dir}/md5">
				<include name="**/*.dita"/>
				<include name="**/*.ditamap"/>
			</fileset>
		</xslt>

		<!-- Merge the XLIFF files into one larger file -->
		<xslt
      taskname="xliff-merge"
      force="true"
      in="${translate.customization.dir}/${xliff.version}/xliff-merge.xsl"
      out="${output.dir}/translate.xlf"
      style="${translate.customization.dir}/${xliff.version}/xliff-merge.xsl"
    >
			<xmlcatalog refid="fake.dita.catalog"/>
			<param expression="${dita.temp.dir}/xliff/" name="in"/>
			<param expression="${dita.temp.dir}/md5" name="SOURCE"/>
			<param expression="${dita.temp.dir}/skl" name="SKELETON"/>
			<param expression="${translate.from}" name="SOURCE_LANG"/>
			<param expression="${translate.to}" name="TARGET_LANG"/>
		</xslt>

		<replace file="${output.dir}/translate.xlf" token="xmlns=&#34;&#34;" value=""/>
	</target>


	

	<!-- 
		Take an untranslated XLIFF File and request translations
		of the source into the specified target langauge.
	-->
	<target name="xliff-translate">
		<get-translations xliff="${args.input}"/>
	</target>


	<target name="xliff-dita">

		<skeleton-prepare xliff="${args.input}"/>

		<!-- Replace the placeholders in the skeleton files -->
		<fileset id="translated.dita" dir="${dita.temp.dir}/stage2" casesensitive="yes">
			<include name="**/*.xml"/>
		</fileset>
		<skeleton-files src="translated.dita" dir="${dita.temp.dir}/stage2"/>

	</target>




	<target
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    name="dita2xliff-create"
    description="XML Localization Interchange File Format (XLIFF)"
    dita:depends="{depend.preprocess.pre},
			build-init,
			xliff.init, 
			{depend.preprocess.post},
			xliff-create"
  />
	<target
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    name="dita2xliff-translate"
    description="Auto-translate an XLIFF File using an online service"
    dita:depends="{depend.preprocess.pre},
			build-init,
			translate.init,
			{depend.preprocess.post},
			xliff-translate"
  />
	<target
    dita:extension="depends org.dita.dost.platform.InsertDependsAction"
    name="dita2xliff-dita"
    description="Supply translated text into DITA skeleton files using an XLIFF File"
    dita:depends="{depend.preprocess.pre},
			build-init,
			trans-unit.init,
			{depend.preprocess.post},
			xliff-dita"
  />
</project>
